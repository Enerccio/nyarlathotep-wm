/* Generated by wayland-scanner 1.12.0 */

#ifndef DECORATOR_CLIENT_PROTOCOL_H
#define DECORATOR_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_decorator The decorator protocol
 * @section page_ifaces_decorator Interfaces
 * - @subpage page_iface_decorator_provider - control nwc decorators for undecorated windows
 */
struct decorator_provider;

/**
 * @page page_iface_decorator_provider decorator_provider
 * @section page_iface_decorator_provider_desc Description
 *
 * @section page_iface_decorator_provider_api API
 * See @ref iface_decorator_provider.
 */
/**
 * @defgroup iface_decorator_provider The decorator_provider interface
 *
 */
extern const struct wl_interface decorator_provider_interface;



/** @ingroup iface_decorator_provider */
static inline void
decorator_provider_set_user_data(struct decorator_provider *decorator_provider, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) decorator_provider, user_data);
}

/** @ingroup iface_decorator_provider */
static inline void *
decorator_provider_get_user_data(struct decorator_provider *decorator_provider)
{
	return wl_proxy_get_user_data((struct wl_proxy *) decorator_provider);
}

static inline uint32_t
decorator_provider_get_version(struct decorator_provider *decorator_provider)
{
	return wl_proxy_get_version((struct wl_proxy *) decorator_provider);
}

/** @ingroup iface_decorator_provider */
static inline void
decorator_provider_destroy(struct decorator_provider *decorator_provider)
{
	wl_proxy_destroy((struct wl_proxy *) decorator_provider);
}

#ifdef  __cplusplus
}
#endif

#endif
